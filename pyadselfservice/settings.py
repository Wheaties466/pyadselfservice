"""
Django settings for pyadselfservice project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from pathlib import Path

STATIC_URL = '/static/'

# Add this line to specify where collectstatic will collect static files to
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-egh@3xouq-5a2bud6gx68j)t-t%1aqe0o4-hhgp4ua*l$9=a56'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'captcha',
    'pyadselfservice',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'pyadselfservice.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pyadselfservice.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Settings for pyadselfservice

#Home page if the OTP validation fails
OTP_LOGIN_URL='/'

#Your SMTP Relay server details for OTP trigger
EMAIL_USE_TLS = True
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = 'username@gmail.com'
#If you are using Gmail, use app password if you have enabled 2FA in youe google account.
EMAIL_HOST_PASSWORD = 'password'
EMAIL_PORT = 587
DEFAULT_FROM_EMAIL="Sender <username@gmail.com>"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#IP or FQDN of your domain controller and LDAPs Port. The default port number for LDAPs is 636.
PYADSELFSERVICE_DCFQDN='dc1.domain.local'
PYADSELFSERVICE_DCPORT = '636'

#FQDN of your Domain/Forest
PYADSELFSERVICE_DOMAINFQDN='domain.local'

#Credentials with at least "Read all properties", "Reset password", "Read/Write lockoutTime" permissions on AD, Please refer to "Section 2" of my blog http://blogger.iamamazing.in/2016/10/web-based-python3-password-reset-tool.html
PYADSELFSERVICE_USERNAME='nuid@domain.local'
PYADSELFSERVICE_PASS='password'

#Base DN of the domain
PYADSELFSERVICE_BASEDN='DC=domain,DC=local'

#AD attribute to extract email address of the user. This is to trigger OTP. If you have MS Exchange or email platform integrated with AD then please choose a different attribute to store alternate email.
PYADSELFSERVICE_ATTR2 = 'mail'

#Please cerate this path or change it to wherever you want to store the logs. Ensure to change the owner of the folder to web server user account like www-data
PYADSELFSERVICE_LOGPATH='/var/log/pyadselfservice/'

#Each password reset session will be valid for 900secs (15mins), within which user must complete thier password reset. You can change the as per need.
PYADSELFSERVICE_STOUT='900'

# Key for encryption/decryption of the parameters. The key must be either 16, 24, or 32 bytes long
#PYADSELFSERVICE_CRYPTKEY='1234567890123456'

#AD attribute for the first factor authentication.
PYADSELFSERVICE_ATTR3 = 'mobile'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': '%(asctime)s %(levelname)s %(module)s %(process)d %(thread)d %(funcName)s %(message)s'
        },
    },
    'handlers': {
        'ldap_logs': {
            'level':'DEBUG',
            'class':'logging.FileHandler',
            'filename': PYADSELFSERVICE_LOGPATH+'/debug.log',
            'formatter':'standard',
        },
        'http_logs': {
            'level':'DEBUG',
            'class':'logging.FileHandler',
            'filename': PYADSELFSERVICE_LOGPATH+'/django_request.log',
            'formatter':'standard',
        },
    },
    'loggers': {
        '': {
            'handlers': ['ldap_logs'],
            'level': 'DEBUG',
            'propagate': True
        },
        'django.request': {
            'handlers': ['http_logs'],
            'level': 'DEBUG',
            'propagate': False
        },
    }
}
